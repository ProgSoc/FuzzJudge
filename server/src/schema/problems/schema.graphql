extend type Query {
	problems: [Problem!]!
	problem(slug: String!): Problem!
}

extend type Mutation {
	judge(slug: String!, code: String!, output: String!): JudgeOutput!
		@auth
		@clock
	getAdminFuzz(slug: String!, teamId: Int!): String! @auth(role: admin)
}

union JudgeOutput = JudgeSuccessOutput | JudgeErrorOutput

type JudgeSuccessOutput {
	message: String!
}

type JudgeErrorOutput {
	message: String!
	errors: String!
}

type Problem @auth {
	slug: String!
	icon: String!
	name: String!
	brief: String!
	difficulty: Int! # 1-3
	points: Int!
	instructions: String @clock
	solved: Boolean @clock
	fuzz(teamId: Int @auth(role: admin)): String @auth @clock
}
