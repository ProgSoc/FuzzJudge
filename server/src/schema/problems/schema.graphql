extend type Query {
	"""
	Get a list of all problems
	"""
	problems: [Problem!]!
	"""
	Get a specific problem by its slug
	"""
	problem(slug: ID!): Problem!
}

extend type Mutation {
	"""
	Submit a solution to a problem.
	"""
	judge(slug: ID!, code: String!, output: String!): JudgeOutput! @auth @clock
	"""
	Get a team's fuzz for a specific problem
	"""
	getAdminFuzz(slug: ID!, teamId: ID!): String! @auth(role: admin)
}

union JudgeOutput = JudgeSuccessOutput | JudgeErrorOutput

type JudgeSuccessOutput {
	"""
	A message indicating the success of the judge operation.
	"""
	message: String!
}

type JudgeErrorOutput {
	"""
	An error message indicating what went wrong during the judge operation.
	"""
	message: String!
	"""
	Additional errors to help diagnose the issue.
	"""
	errors: String!
}

type Problem @auth {
	"""
	The unique identifier for the problem, suitable for use in urls.
	"""
	slug: ID!
	"""
	A single emoji that represents the problem.
	"""
	icon: String!
	"""
	The name of the problem.
	"""
	name: String!
	"""
	The difficulty level of the problem, represented as an integer from 0 to 3.
	Tutorials are 0, easy problems are 1, medium problems are 2, and hard problems are 3.
	"""
	difficulty: Int!
	"""
	The number of points awarded for solving the problem.
	"""
	points: Int!
	"""
	The instructions for the problem, contextualizing the problem and providing necessary details.
	"""
	instructions: String! @clock
	"""
	The status of whether the problem has been solved by the team.
	"""
	solved: Boolean
	"""
	Get the fuzz for a specific team.
	This is used to provide a unique identifier for the team to use in their solution.
	"""
	fuzz(teamId: ID @auth(role: admin)): String! @auth @clock
}
