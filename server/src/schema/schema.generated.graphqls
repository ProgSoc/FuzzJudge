type AlreadySolvedError {
  message: String!
}

type Clock {
  finish: DateTime!
  hold: DateTime
  start: DateTime!
}

type Competition {
  brief: String!
  instructions: String!
  name: String!
}

scalar DateTime

scalar File

union JudgeOutput = AlreadySolvedError | JudgeOutputSuccess | JudgingError | NotInTeamError

type JudgeOutputSuccess {
  message: String!
}

type JudgingError {
  errors: [String!]!
  message: String!
}

type Mutation {
  adjustFinishTime(finishTime: DateTime!): Clock!
  adjustStartTime(keepDuration: Boolean, startTime: DateTime!): Clock!
  holdClock: Clock!
  judge(code: File!, output: String!, slug: ID!): JudgeOutput!
  releaseClock(extendDuration: Boolean): Clock!
}

type NotInTeamError {
  message: String!
}

type Problem {
  brief: String!
  difficulty: Int!
  fuzz: String!
  icon: String!
  instructions: String!
  name: String!
  points: Int!
  slug: ID!
  solved: Boolean!
}

type ProblemScore {
  penalty: Float!
  points: Int!
  solved: Boolean!
  tries: Int!
}

type Query {
  competition: Competition!
  header: String!
  problem(slug: String!): Problem!
  problems: [Problem!]!
  submission(id: ID!): Submission
  submissions: Submission
  version: String!
}

type ScoreboardTeam {
  name: String!
  rank: Int!
  score: TeamScore!
}

type Submission {
  code: String
  id: ID!
  ok: Boolean!
  out: String
  problemId: ID!
  teamId: ID!
  time: DateTime!
  vler: String
  vlms: Float
}

type Subscription {
  clock: Clock!
  scoreboard: [ScoreboardTeam!]!
}

type TeamScore {
  problems: [ProblemScore!]!
  total: TeamTotal!
}

type TeamTotal {
  penalty: Float!
  points: Int!
}