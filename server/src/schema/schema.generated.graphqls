directive @auth(role: UserRole = competitor) on ARGUMENT_DEFINITION | FIELD_DEFINITION | OBJECT

directive @clock on FIELD_DEFINITION

type Broadcast {
  content: String!
  id: ID!
  title: String!
}

type Clock {
  finish: DateTime!
  hold: DateTime
  start: DateTime!
}

type Competition {
  instructions: String!
  name: String!
}

scalar DateTime

scalar File

type JudgeErrorOutput {
  errors: String!
  message: String!
}

union JudgeOutput = JudgeErrorOutput | JudgeSuccessOutput

type JudgeSuccessOutput {
  message: String!
}

type Mutation {
  adjustFinishTime(finishTime: DateTime!): Clock!
  adjustStartTime(keepDuration: Boolean, startTime: DateTime!): Clock!
  createBroadcast(content: String!, title: String!): Broadcast!
  createTeam(hidden: Boolean, name: String!): Team!
  createUser(name: String!, password: String!, role: UserRole!, teamId: Int, username: String!): User!
  deleteTeam(id: Int!): Team!
  deleteUser(id: Int!): User!
  getAdminFuzz(slug: String!, teamId: Int!): String!
  holdClock: Clock!
  judge(code: String!, output: String!, slug: String!): JudgeOutput!
  login(password: String!, username: String!): User!
  logout: Boolean!
  overrideJudge(solved: Boolean!, submissionId: Int!): Submission!
  register(name: String!, password: String!, username: String!): User!
  releaseClock(extendDuration: Boolean): Clock!
  releaseResults: Clock!
  updateTeam(hidden: Boolean, id: Int!, name: String): Team!
  updateUser(id: Int!, name: String, password: String, role: UserRole, teamId: Int, username: String): User!
}

type Problem {
  difficulty: Int!
  fuzz(teamId: Int): String!
  icon: String!
  instructions: String!
  name: String!
  points: Int!
  slug: String!
  solved: Boolean
}

type ProblemScore {
  penalty: Float!
  points: Int!
  problem: Problem!
  slug: String!
  solved: Boolean!
  tries: Int!
}

type Query {
  competition: Competition!
  header: String!
  me: User
  problem(slug: String!): Problem!
  problems: [Problem!]!
  submission(id: Int!): Submission
  submissions(problemSlug: String, teamId: Int): [Submission!]!
  team(id: Int!): Team!
  teams: [Team!]!
  user(id: Int!): User!
  users: [User!]!
  version: String!
}

type ScoreboardRow {
  penalty: Float!
  points: Int!
  problems: [ProblemScore!]!
  rank: Int!
  team: Team!
  teamId: Int!
}

type Submission {
  code: String
  id: Int!
  ok: Boolean
  out: String
  problem: Problem!
  problemSlug: String!
  team: Team!
  teamId: Int!
  time: DateTime!
  vler: String
  vlms: Float
}

type Subscription {
  broadcasts: Broadcast!
  clock: Clock!
  scoreboard: [ScoreboardRow!]!
}

type Team {
  hidden: Boolean!
  id: Int!
  members: [User!]!
  name: String!
  seed: String!
  submissions(problemSlug: String): [Submission!]!
}

type User {
  id: Int!
  name: String!
  role: UserRole!
  team: Team
  teamId: Int
  username: String!
}

enum UserRole {
  admin
  competitor
}