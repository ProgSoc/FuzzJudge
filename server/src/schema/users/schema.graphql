extend type Query {
	users: [User!]! @auth(role: admin)
	user(id: Int!): User! @auth(role: admin)
	me: User
}

extend type Mutation {
	createUser(
		username: String!
		password: String!
		role: UserRole!
		teamId: Int
	): User! @auth(role: admin)
	updateUser(id: Int!, role: UserRole, teamId: Int): User! @auth(role: admin)
	deleteUser(id: Int!): User! @auth(role: admin)
	login(username: String!, password: String!): User!
	register(username: String!, password: String!, name: String!): User!
	logout: Boolean! @auth(role: competitor)
}

enum UserRole {
	competitor
	admin
}

type User {
	name: String!
	id: Int!
	role: UserRole!
	teamId: Int
	team: Team @auth
	username: String!
}

directive @auth(role: UserRole = competitor) on FIELD_DEFINITION | OBJECT
