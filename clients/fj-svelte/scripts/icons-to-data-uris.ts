/*
 * This program is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published by the
 * Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License
 * for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License along
 * with this program. If not, see <https://www.gnu.org/licenses/>.
 */

import fs from "node:fs/promises";
import { basename, extname, join as joinPath } from "node:path";
import { TOML } from "bun";
import datauri from "datauri";
import type { IconDescriptor, IconList } from "../src/types";

const ICONS_DIR = "./icons";

const files: string[] = [];

const loadIcon = async (metaPath: string): Promise<IconDescriptor> => {
	const icon: IconDescriptor = TOML.parse(
		await Bun.file(joinPath(ICONS_DIR, metaPath)).text(),
	);

	const REQUIRED_PROPERTIES = ["width", "alt"];
	for (const property of REQUIRED_PROPERTIES) {
		if (!Object.keys(icon).includes(property))
			throw `Expected property ${property} in ${metaPath}.`;
	}

	const name = basename(metaPath, ".toml");
	const iconFile = files.find(
		(n) => extname(n) !== ".toml" && name === basename(n, ".svg"),
	);
	if (iconFile === undefined) throw `Could not find icon for ${name}.`;

	icon.dataUri = await datauri(joinPath(ICONS_DIR, iconFile));
	icon.name = name;

	return icon;
};

(async () => {
	for await (const file of await fs.readdir(ICONS_DIR, {
		withFileTypes: true,
	})) {
		const FILE_TYPES = [".toml", ".svg"];
		if (file.isDirectory() || !FILE_TYPES.includes(extname(file.name) ?? ""))
			continue;
		files.push(file.name);
	}

	const icons = await Promise.all(
		files
			.filter((name) => extname(name) === ".toml")
			.map((name) => loadIcon(name)),
	);

	const iconList: IconList = {};

	for (const icon of icons) {
		if (icon.name) {
			iconList[icon.name] = icon;
		}
	}

	const json = JSON.stringify(iconList);

	const _ = await Bun.write(
		"src/icons.ts",
		`// DO NOT EDIT THIS FILE!
// This file was generated by \`scripts/icons-to-data-uris.ts\`.
import { type IconList } from "./types";
const icons: IconList = ${json};
export default icons;`,
	);
})().catch((e) => {
	console.error("Error loading icons:", e);
	process.exit(1);
});
