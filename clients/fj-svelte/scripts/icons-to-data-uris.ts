/*
 * This program is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published by the
 * Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License
 * for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License along
 * with this program. If not, see <https://www.gnu.org/licenses/>.
 */

import { join as joinPath, extname, basename } from "https://deno.land/std@0.223.0/path/mod.ts";
import { parse as parseToml } from "jsr:@std/toml";
import { datauri } from "https://deno.land/x/datauri@v1.1.2/mod.ts";

import { type IconList, type Icon } from "../src/types.ts";

const ICONS_DIR = "./icons";

const files: string[] = [];

const loadIcon = async (metaPath: string): Promise<Icon> => {
  const icon: Icon = parseToml(await Deno.readTextFile(joinPath(ICONS_DIR, metaPath)));

  const REQUIRED_PROPERTIES = ["width", "alt"];
  for (const property of REQUIRED_PROPERTIES) {
    if (!Object.keys(icon).includes(property)) throw `Expected property ${property} in ${metaPath}.`;
  }

  const name = basename(metaPath, ".toml");
  const iconFile = files.find((n) => extname(n) !== ".toml" && name == basename(n, ".svg"));
  if (iconFile === undefined) throw `Could not find icon for ${name}.`;

  icon.dataUri = await datauri(joinPath(ICONS_DIR, iconFile));
  icon.name = name;

  return icon;
};

(async () => {
  for await (const file of Deno.readDir(ICONS_DIR)) {
    const FILE_TYPES = [".toml", ".svg"];
    if (file.isDirectory || !FILE_TYPES.includes(extname(file.name) ?? "")) continue;
    files.push(file.name);
  }

  const icons = await Promise.all(files.filter((name) => extname(name) === ".toml").map((name) => loadIcon(name)));

  const iconList: IconList = {};

  for (const icon of icons) {
    iconList[icon.name!] = icon;
  }

  const json = JSON.stringify(iconList);

  let _ = await Deno.writeTextFile(
    "src/icons.ts",
    `// DO NOT EDIT THIS FILE!
// This file was generated by \`scripts/icons-to-data-uris.ts\`.
import { type IconList } from "./types";
const icons: IconList = ${json};
export default icons;`,
  );
})().catch((e) => {
  console.error("Error loading icons:", e);
  Deno.exit(1);
});
