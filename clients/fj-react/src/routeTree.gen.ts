/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ProblemsImport } from './routes/problems'
import { Route as LeaderboardImport } from './routes/leaderboard'
import { Route as IndexImport } from './routes/index'
import { Route as ProblemsIndexImport } from './routes/problems/index'
import { Route as ProblemsSlugImport } from './routes/problems/$slug'

// Create/Update Routes

const ProblemsRoute = ProblemsImport.update({
  id: '/problems',
  path: '/problems',
  getParentRoute: () => rootRoute,
} as any)

const LeaderboardRoute = LeaderboardImport.update({
  id: '/leaderboard',
  path: '/leaderboard',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ProblemsIndexRoute = ProblemsIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ProblemsRoute,
} as any)

const ProblemsSlugRoute = ProblemsSlugImport.update({
  id: '/$slug',
  path: '/$slug',
  getParentRoute: () => ProblemsRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/leaderboard': {
      id: '/leaderboard'
      path: '/leaderboard'
      fullPath: '/leaderboard'
      preLoaderRoute: typeof LeaderboardImport
      parentRoute: typeof rootRoute
    }
    '/problems': {
      id: '/problems'
      path: '/problems'
      fullPath: '/problems'
      preLoaderRoute: typeof ProblemsImport
      parentRoute: typeof rootRoute
    }
    '/problems/$slug': {
      id: '/problems/$slug'
      path: '/$slug'
      fullPath: '/problems/$slug'
      preLoaderRoute: typeof ProblemsSlugImport
      parentRoute: typeof ProblemsImport
    }
    '/problems/': {
      id: '/problems/'
      path: '/'
      fullPath: '/problems/'
      preLoaderRoute: typeof ProblemsIndexImport
      parentRoute: typeof ProblemsImport
    }
  }
}

// Create and export the route tree

interface ProblemsRouteChildren {
  ProblemsSlugRoute: typeof ProblemsSlugRoute
  ProblemsIndexRoute: typeof ProblemsIndexRoute
}

const ProblemsRouteChildren: ProblemsRouteChildren = {
  ProblemsSlugRoute: ProblemsSlugRoute,
  ProblemsIndexRoute: ProblemsIndexRoute,
}

const ProblemsRouteWithChildren = ProblemsRoute._addFileChildren(
  ProblemsRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/leaderboard': typeof LeaderboardRoute
  '/problems': typeof ProblemsRouteWithChildren
  '/problems/$slug': typeof ProblemsSlugRoute
  '/problems/': typeof ProblemsIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/leaderboard': typeof LeaderboardRoute
  '/problems/$slug': typeof ProblemsSlugRoute
  '/problems': typeof ProblemsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/leaderboard': typeof LeaderboardRoute
  '/problems': typeof ProblemsRouteWithChildren
  '/problems/$slug': typeof ProblemsSlugRoute
  '/problems/': typeof ProblemsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/leaderboard'
    | '/problems'
    | '/problems/$slug'
    | '/problems/'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/leaderboard' | '/problems/$slug' | '/problems'
  id:
    | '__root__'
    | '/'
    | '/leaderboard'
    | '/problems'
    | '/problems/$slug'
    | '/problems/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LeaderboardRoute: typeof LeaderboardRoute
  ProblemsRoute: typeof ProblemsRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LeaderboardRoute: LeaderboardRoute,
  ProblemsRoute: ProblemsRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/leaderboard",
        "/problems"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/leaderboard": {
      "filePath": "leaderboard.tsx"
    },
    "/problems": {
      "filePath": "problems.tsx",
      "children": [
        "/problems/$slug",
        "/problems/"
      ]
    },
    "/problems/$slug": {
      "filePath": "problems/$slug.tsx",
      "parent": "/problems"
    },
    "/problems/": {
      "filePath": "problems/index.tsx",
      "parent": "/problems"
    }
  }
}
ROUTE_MANIFEST_END */
