on:
  workflow_dispatch:

name: Publish Server
jobs:
  test-server:
    name: Test Bun
    runs-on: ubuntu-latest
    steps:
      # ...
      - uses: actions/checkout@v4
      - uses: oven-sh/setup-bun@v2
      - name: Install Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x
      # run any `bun` or `bunx` command
      - run: bun install
      - run: cd server && bun test
  publish-server-pkg:
    name: Publish Bun
    needs: test-server
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: oven-sh/setup-bun@v2
      - name: Setup NPM
        uses: actions/setup-node@v4
        with:
          registry-url: 'https://registry.npmjs.org/'
          scope: '@progsoc'
          token: ${{ secrets.NPM_TOKEN }}
      # run any `bun` or `bunx` command
      - run: bun install
      - name: Build JS
        run: bun run -F @progsoc/* build
      - run: cd server && bun publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          NPM_CONFIG_TOKEN: ${{ secrets.NPM_TOKEN }}
  publish-docker:
    name: Publish Docker Images
    runs-on: ubuntu-latest
    needs: test-server
    permissions: 
      packages: write
      id-token: write
    env:
      IMAGE: ghcr.io/progsoc/fuzzjudge
      REGISTRY: ghcr.io
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE }}
          tags: |
            # use custom value instead of git tag
            type=raw,value=latest
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker Login
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push
        uses: docker/build-push-action@v6
        with:
          tags: ${{ steps.meta.outputs.tags }}
          push: true
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.IMAGE }}:latest
      